const COUNT = 1
const IN1 = 0
const IN2 = 4
const OUT = 2
const OCOUNT = 3
const GIVEN = 5

def det_in(test: Int) Int {
    return ((test * 85) ^ (test * 1356)) % 256
}

def on_reset($scratch_space: [Int], test: Int) {
    ui_set_hidden("note", true)
}

def arch_get_input($scratch_space: [Int], test: Int) Int {

    var input = 0
    switch scratch_space[COUNT]
        0 {
            input = det_in(test)
            scratch_space[IN1] = input
            scratch_space[COUNT] += 1
            return scratch_space[IN1]
        }
        1 {
            input = test
            scratch_space[IN2] = input
            ui_set_text("goal", `What is reverse of {scratch_space[IN1] << 8 + scratch_space[IN2]}?`)
            ui_set_hidden("note", false)
            scratch_space[COUNT] += 1
            return scratch_space[IN2]
        }
    
}

def reverse_byte(byte: Int) Int {
    let bit1 = (byte / 128) % 2
    let bit2 = (byte / 64) % 2
    let bit3 = (byte / 32) % 2
    let bit4 = (byte / 16) % 2
    let bit5 = (byte / 8) % 2
    let bit6 = (byte / 4) % 2
    let bit7 = (byte / 2) % 2
    let bit8 = byte % 2
    var byteout = (128 * bit8) + (64 * bit7) + (32 * bit6) + (16 * bit5) + (8 * bit4) + (4 * bit3) + (2 * bit2) + bit1
    return byteout
}

def view_pattern(byte1: Int, byte2: Int) String {
    var byte = byte1
    var repeat = 0
    var out = ""
    while repeat != 2 {
        out += str((byte / 128) % 2)
        out += str((byte / 64) % 2)
        out += str((byte / 32) % 2)
        out += str((byte / 16) % 2)
        out += str((byte / 8) % 2)
        out += str((byte / 4) % 2)
        out += str((byte / 2) % 2)
        out += str(byte % 2)
        byte = byte2
        repeat += 1
    }
    return out
}

def view_byte(byte: Int) String {
    var out = ""
    out += str((byte / 128) % 2)
    out += str((byte / 64) % 2)
    out += str((byte / 32) % 2)
    out += str((byte / 16) % 2)
    out += str((byte / 8) % 2)
    out += str((byte / 4) % 2)
    out += str((byte / 2) % 2)
    out += str(byte % 2)
    return out
}

def arch_check_output($scratch_space: [Int], test: Int, input: Int, output: Int) TestResult {

    let trimout = output & 0xff

    if scratch_space[COUNT] == 0 {
        set_error(`You must read the input.`)
        return fail
    }
    if scratch_space[COUNT] != 2 {
        set_error(`You did not read the input the correct number of times.`)
        return fail
    }

    switch scratch_space[OCOUNT]
        0 {
            if trimout != reverse_byte(scratch_space[IN2]) {
                set_error(`Reverse of {view_pattern(scratch_space[IN1], scratch_space[IN2])} = {view_pattern(reverse_byte(scratch_space[IN2]), reverse_byte(scratch_space[IN1]))}, not {view_byte(trimout)}////////`)
                return fail
            }
            scratch_space[GIVEN] = trimout
            scratch_space[OCOUNT] += 1
            return pass
        }
        1 {
            if trimout != reverse_byte(scratch_space[IN1]) {
                set_error(`Reverse of {view_pattern(scratch_space[IN1], scratch_space[IN2])} = {view_pattern(reverse_byte(scratch_space[IN2]), reverse_byte(scratch_space[IN1]))}, not {view_pattern(scratch_space[GIVEN], trimout)}`)
                return fail
            }
            return win
        }
}